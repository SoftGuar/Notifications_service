generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Decider {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

}

model SuperAdmin {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  admins     Admin[]
}

model Admin {
  id         Int        @id @default(autoincrement())
  first_name String
  last_name  String
  email      String     @unique
  password   String
  phone      String?
  add_by     Int
  privilege  Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

  superAdmin SuperAdmin @relation(fields: [add_by], references: [id], onDelete: Cascade)
}

model Maintainer {
  id           Int            @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String         @unique
  password     String
  phone        String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

  DispoIssue   DispoIssue[]
  Intervention Intervention[]
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  first_name   String
  last_name    String
  password     String
  phone        String?
  MAC                String 
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  Dispositive  Dispositive[]
  Quotation    Quotation[]
  Transaction  Transaction[]
  helpers      Helper[]       @relation("UserHelpers")
  helper_recommendations HelperRecommendation[] @relation("UserHelperRecommendations")

}

model Helper {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
  users      User[]  @relation("UserHelpers")
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

}

model Assistance {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
}

model HelperRecommendation {
  id          Int      @id @default(autoincrement())
  first_name  String
  last_name   String
  email       String
  phone       String?
  status      String   @default("pending") // "pending", "approved", "rejected"
  user_id     Int      // User who made the recommendation
  notes       String?  // Optional notes from the recommender
  user        User     @relation("UserHelperRecommendations", fields: [user_id], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
}

model Commercial {
  id          Int           @id @default(autoincrement())
  first_name  String
  last_name   String
  email       String        @unique
  password    String
  phone       String?
  Transaction Transaction[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
 
}

model Dispositive {
  id                 Int                  @id @default(autoincrement())
  type               String
  start_date         DateTime
  end_date           DateTime
  initial_state      String
  MAC                String
  state              String
  user_id            Int?
  product_id         Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  DispoIssue         DispoIssue[]
  Product            Product              @relation(fields: [product_id], references: [id], onDelete: Cascade)
  User               User?                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Intervention       Intervention[]
  ProductTransaction ProductTransaction[]
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  created_at   DateTime  @default(now())
  updated_at   DateTime   @default(now())
  Dispositive      Dispositive[]
  ProductQuotation ProductQuotation[]
}

model ProductQuotation {
  quotation_id Int
  product_id   Int
  count        Int
  created_at   DateTime  @default(now())
  updated_at   DateTime
  Product      Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Quotation    Quotation @relation(fields: [quotation_id], references: [id], onDelete: Cascade)

  @@id([quotation_id, product_id])
}

model ProductTransaction {
  transaction_id Int
  dispositive_id Int
  isConfirmed    Boolean     @default(false)
  created_at     DateTime    @default(now())
  updated_at     DateTime
  Dispositive    Dispositive @relation(fields: [dispositive_id], references: [id])
  Transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@id([transaction_id, dispositive_id])
}

model Quotation {
  id               Int                @id @default(autoincrement())
  user_id          Int
  created_at       DateTime           @default(now())
  updated_at       DateTime
  ProductQuotation ProductQuotation[]
  User             User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Transaction {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  commercial_id      Int
  created_at         DateTime             @default(now())
  updated_at         DateTime
  ProductTransaction ProductTransaction[]
  Commercial         Commercial           @relation(fields: [commercial_id], references: [id], onDelete: Cascade)
  User               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model DispoIssue {
  id            Int         @id @default(autoincrement())
  dispositiveId Int
  description   String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  status        String      @default("pending")
  maintainerId  Int?
  Dispositive   Dispositive @relation(fields: [dispositiveId], references: [id])
  Maintainer    Maintainer? @relation(fields: [maintainerId], references: [id])
}

model Intervention {
  idMaintainer       Int
  description        String
  type               String
  end_date           DateTime
  start_date         DateTime            @default(now())
  id                 Int                 @id @default(autoincrement())
  status             InterventionStatus  @default(pending)
  idDispositive      Int
  Dispositive        Dispositive         @relation(fields: [idDispositive], references: [id])
  Maintainer         Maintainer          @relation(fields: [idMaintainer], references: [id])
  InterventionReport InterventionReport?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

}

model InterventionReport {
  id             Int          @id @default(autoincrement())
  interventionId Int          @unique
  title          String
  description    String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  Intervention   Intervention @relation(fields: [interventionId], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int       @id @default(autoincrement())
  user_id    Int
  user_type  UserType @default(USER)
  type       String?
  title      String
  message    String
  metadata   Json?
  is_read    Boolean   @default(false)
  created_at DateTime  @default(now())
  sent_at    DateTime?
  read_at    DateTime?
}

enum InterventionStatus {
  done
  inProgress
  pending
  rescheduled
}
enum UserType {
  USER
  COMMERCIAL
  ADMIN
  SUPERADMIN
  MAINTAINER
  DECIDER
  HELPER
}